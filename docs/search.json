[
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "Our Course Project",
    "section": "",
    "text": "I’m honored to be a member of the EMUTrend Explorers project team.\nBelow, you’ll find a brief summary of our project. To access a detailed project description, please go to our lovely project .\nSummary\nAnalyzing Preference Patterns: A Study on Industrial Engineering Programs in Ankara\nThis title represents a study examining preference patterns of Industrial Engineering programs in Ankara. The project aims to analyze the impact of these programs on student preferences, exploring trends in program preference and identifying potential influencing factors. Key focal points of the study may include preference rates, student motivation for program selection, notable features of the programs, and future expectations. The goal is to shed light on how Industrial Engineering programs in Ankara are perceived and chosen by students.\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to My Analytics Lab",
    "section": "",
    "text": "Hello! My name is Dilan Su Fırat.\nThis is my personal webpage.\nPlease stay tuned to follow my works on data analytics, blog posts, and more.\n\n\n\n\n Back to top"
  },
  {
    "objectID": "assignments/assignment-2.html",
    "href": "assignments/assignment-2.html",
    "title": "Assignment 2",
    "section": "",
    "text": "Generating URL for the initial search with criteria like “Movie” type, “Turkey” as the country, and a minimum of “2500” votes, incorporating “&count=250” to extend the list. Create two additional URLs with release date filters for “01/01/2010-31/12/2023” and “……-31/12/2009.”\n\n# Import necessary packages\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.3.2\n\n\nWarning: package 'ggplot2' was built under R version 4.3.2\n\n\nWarning: package 'readr' was built under R version 4.3.2\n\n\nWarning: package 'dplyr' was built under R version 4.3.2\n\n\nWarning: package 'stringr' was built under R version 4.3.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(stringr)\nlibrary(rvest)\n\nWarning: package 'rvest' was built under R version 4.3.2\n\n\n\nAttaching package: 'rvest'\n\nThe following object is masked from 'package:readr':\n\n    guess_encoding\n\nlibrary(ggplot2)\nlibrary(knitr)\n\n# Generate the Urls vector \n\nurl_2010_2023 &lt;- \"https://www.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250\"\nurl_before_2010 &lt;- \"https://www.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250\"\nurl_vector &lt;- c(url_2010_2023, url_before_2010)\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(stringr)\nlibrary(rvest)\n\n\nurl_2010_2023 &lt;- \"https://www.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250\"\nurl_before_2010 &lt;- \"https://www.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250\"\nurl_vector &lt;- c(url_2010_2023, url_before_2010)\n\n# Generate vectors for title, year,duration, rating, votes variables \n\ntitles &lt;- c()\nyears &lt;- c()\ndurations &lt;- c()\nratings &lt;- c()\nvotes &lt;- c()\n\n\n# Use For Loop for reading the HTML content of IBMD website because of having two dimensional vector of Urls\n\nfor (url in url_vector) {\n  page &lt;- read_html(url)\n  \n# Web scrapping to create a Data Frame with columns: Title, Year, Duration, Rating, Votes\n\n  title_names &lt;- page %&gt;% html_nodes('.ipc-title__text') %&gt;% html_text()\n  title_names &lt;- tail(head(title_names, -1), -1)\n  title_names &lt;- str_split(title_names, \" \", n = 2)\n  title_names &lt;- unlist(lapply(title_names, function(x) {x[2]}))\n  \n  year &lt;- page %&gt;% html_nodes(\".sc-43986a27-7.dBkaPT.dli-title-metadata\") %&gt;% html_text() %&gt;%\n    substr(1, 4) %&gt;%\n    as.numeric()\n  \n  duration &lt;- page %&gt;% html_nodes(\".sc-43986a27-7.dBkaPT.dli-title-metadata\") %&gt;% html_text()\n  \n# Extract only the hour part from the data containing both time and date, divide the data by 10 and take the        remainder\n  \n  hour &lt;- str_extract(duration, \"\\\\d+h\") %&gt;%\n    str_replace(\"h\", \"\") %&gt;%\n    as.numeric() %% 10\n  \n  total_duration &lt;- hour * 60 + str_extract(duration, \"\\\\d+m\") %&gt;%\n    str_replace(\"m\", \"\") %&gt;%\n    as.numeric()\n  \n  rating &lt;- page %&gt;% html_nodes(\".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating\") %&gt;%\n    html_text() %&gt;%\n    substr(1, 3) %&gt;%\n    as.numeric()\n  \n  vote &lt;- page %&gt;% html_node(\".sc-53c98e73-0.kRnqtn\") %&gt;% html_text() %&gt;%\n    parse_number()\n  \n# Adding URLs to the vectors created initially is done using the append function\n  \n  titles &lt;- append(titles, title_names)\n  years &lt;- append(years, year)\n  durations &lt;- append(durations, total_duration)\n  ratings &lt;- append(ratings, rating)\n  votes &lt;- append(votes, vote)\n}\n\n# Generate Data Frame with columns: Title, Year, Duration, Rating, Votes\n\nmovies &lt;- data.frame(titles, years, durations, ratings, votes)\nprint(head(movies))\n\n                    titles years durations ratings votes\n1        Kuru Otlar Üstüne  2023       197     8.1  5063\n2  Istanbul Için Son Çagri  2023        91     5.3 35018\n3 Yedinci Kogustaki Mucize  2019       132     8.2  5063\n4           Ölümlü Dünya 2  2023       117     7.5 35018\n5                   Bihter  2023       113     3.6  5063\n6             Ölümlü Dünya  2018       107     7.6 35018\n\n\n\n\n\n\n\n\n# Descending order by rating of movies\n\nmovies_desc_order &lt;- movies %&gt;% arrange(desc(ratings))\n\n# The top 5 of movies\n\nprint(head(movies_desc_order,n=5))\n\n                        titles years durations ratings votes\n1               Hababam Sinifi  1975        87     9.2  5063\n2       CM101MMXI Fundamentals  2013       139     9.1  5063\n3                   Tosun Pasa  1976        90     8.9  5063\n4 Hababam Sinifi Sinifta Kaldi  1975        95     8.9  5063\n5                Süt Kardesler  1976        80     8.8  5063\n\n\n\n# The bottom 5 of movies\n\nprint(tail(movies_desc_order,n=5))\n\n                            titles years durations ratings votes\n466                 Cumali Ceber 2  2018       100     1.2  5063\n467                          Müjde  2022        NA     1.2  5063\n468              15/07 Safak Vakti  2021        95     1.2  5063\n469 Cumali Ceber: Allah Seni Alsin  2017       100     1.0  5063\n470                           Reis  2017       108     1.0 35018\n\n\nI’m not surprised to see that none of the ‘Hababam Sinifi’ films made it to the top. As the data frame indicates, being a film from 1975, it’s remarkable that I, born in 2000, still thoroughly enjoy watching it. Looking at the top 5 film data, it becomes apparent that people lean towards comedy genres, which holds true for my generation as well.\n\n\n\n1.acaydim kollarimi gitme diyeydim - Babam ve Oglum\n\n2.#teamCemsit- Selvi Boylum Al Yazmalim\n\n3.Komutan Logar, bir cisim yaklasiyor efendim - G.O.R.A.\n\n\nfav_movies &lt;- c(\"Babam ve Oglum\",\"Selvi Boylum Al Yazmalim\",\"G.O.R.A.\")\n\n# Check the years, rating and votes for my favorite movies\n\nfav_movies &lt;- movies %&gt;% filter (titles %in% fav_movies) %&gt;% select(-durations) %&gt;% arrange(desc(ratings))\nprint(fav_movies)\n\n                    titles years ratings votes\n1 Selvi Boylum Al Yazmalim  1977     8.5  5063\n2           Babam ve Oglum  2005     8.2 35018\n3                 G.O.R.A.  2004     8.0 35018\n\n\n\n\n\n\n# Import necessary packages\n\nlibrary(tidyverse)\nlibrary(ggplot2)\n\n# Scatter plot of avaerage ratings over the years\n\nyearly_avg &lt;- movies %&gt;%\n  group_by(years) %&gt;%\n  summarize(yearly_rating_averages = mean(ratings))\n\n\nyearly_avg_plot &lt;- ggplot(yearly_avg, aes(x = years, y = yearly_rating_averages)) +\n  geom_point(color = \"purple\",shape = 8, size = 2) +\n  labs(title = \"Yearly Average Ratings\",\n       x = \"Year\",\n       y = \"Average Rating\") +\n  theme_gray() +\n  theme(axis.title = element_text(color = \"pink\"))\n\nprint(yearly_avg_plot)\n\n\n\n\n\n# Scatter plot number of movies over the years\n\nnumber_of_movies &lt;- movies %&gt;%\n  group_by(years) %&gt;% summarize(number_movies = n())\n\nnumber_of_movies_plot &lt;- ggplot(number_of_movies, aes(x = years, y = number_movies)) +\n  geom_point(color = \"purple\",shape = 9, size = 2) +\n  labs(x = \"Year\", y = \"Number of Movies\") +\n  ggtitle(\"Yearly Number of Movies\")+\n  theme_gray() +\n  theme(axis.title = element_text(color = \"pink\"))\n\nprint(number_of_movies_plot)\n\n\n\n\n\n# Box plots of ratings over the years\n\nyearly_avg_box &lt;- ggplot(movies, aes(x = as.factor(years), y = ratings)) + \n  geom_boxplot(fill = \"pink\") +\n  labs(x = \"Year\",\n      y = \"Ratings\")+ ggtitle(\"Yearly Ratings\")+\n  theme_gray() +\n  theme(axis.title = element_text(color = \"purple\")) + theme(axis.text.x = element_text(angle = 90, hjust=1))\n  \n\nprint(yearly_avg_box)\n\n\n\n\nThe observed decline in ratings over the years might suggest a decrease in film quality; however, it is essential to acknowledge the increasing number of films since 1969, indicating a heightened competitive landscape. This dynamic underscores the importance of considering not only the quality of individual films but also the evolving industry context.\n\n\n\n\n# Correlation between ratings and votes\n\ncorrelation &lt;- cor(movies$ratings, movies$votes)\n\n# Print the correlation coefficient\n\ncat(\"Correlation between ratings and votes:\", correlation, \"\\n\")\n\nCorrelation between ratings and votes: 0.0332948 \n\n\nThe correlation coefficient you’ve calculated (0.0332948) is quite close to zero. In statistical terms, this indicates a very weak correlation between ratings and votes. A correlation close to zero suggests that there isn’t a strong linear relationship between these two variables.\nIn practical terms, this means that the number of votes a movie receives is not strongly associated with its rating. The correlation does not imply causation, so while there may be a weak correlation, it doesn’t necessarily mean that more votes directly cause higher or lower ratings, or vice versa. Other factors might influence both ratings and votes independently.\n\n\n\n\nmovies &lt;- na.omit(movies)\n\n# Correlation between ratings and movie's duration\n\ncorrelation &lt;- cor(movies$ratings, movies$durations)\n\ncat(\"Correlation between ratings and movie's duration:\", correlation, \"\\n\")\n\nCorrelation between ratings and movie's duration: 0.00234258 \n\n\n\n# Also we can check the line plot for correlation\n\ncorrelation_plot &lt;- ggplot(movies, aes(x = durations, y = ratings)) + \n  geom_line() + \n  labs(x = \"Movie's Duration\",\n       y = \"Ratings\") + \n  ggtitle(\"Line Plot Rating over the Durations\") +\n  theme_gray() +\n  theme(axis.title = element_text(color = \"purple\"),\n        axis.text.x = element_text(angle = 90))\n\nprint(correlation_plot)\n\n\n\n\nThe correlation coefficient of 0.00234258 between movie ratings and duration is highly negligible, indicating an exceedingly weak correlation in statistical terms. A correlation near zero implies the absence of a robust linear relationship between these two variables.\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(stringr)\nlibrary(rvest)\nlibrary(ggplot2)\n\n\nurl_top_turkish_movies  &lt;- \"https://www.imdb.com/search/title/?title_type=feature&sort=num_votes,desc&groups=top_1000&country_of_origin=TR\"\n\n\n# Generate the empty vector for titles and years\ntitles_top &lt;- c()\nyears_top &lt;- c()\n\n\n# Reading the HTML content of IBMD website\n\npage_2= read_html(url_top_turkish_movies)\n  \n\ntitle_names &lt;- page_2 %&gt;% html_nodes('.ipc-title__text')\ntitle_names &lt;- html_text(title_names)\ntitle_names &lt;- tail(head(title_names,-1),-1)\ntitle_names &lt;- str_split(title_names, \" \", n=2)\ntitle_names &lt;- unlist(lapply(title_names, function(x) {x[2]}))\n\nyear &lt;- page_2 %&gt;% html_nodes(\".sc-43986a27-7.dBkaPT.dli-title-metadata\")  %&gt;%\n  html_text()  %&gt;%\n  substr(1, 4) %&gt;%\n  as.numeric(year)\n\ntitles_top &lt;- append(titles_top, title_names)\nyears_top &lt;- append(years_top, year)\n\n\nmovies_top &lt;- data.frame(titles_top, years_top)\n\nprint(movies_top)\n\n                  titles_top years_top\n1             Babam ve Oglum      2005\n2                     Eskiya      1996\n3                   G.O.R.A.      2004\n4                 Kis Uykusu      2014\n5   Yedinci Kogustaki Mucize      2019\n6    Bir Zamanlar Anadolu'da      2011\n7  Ayla: The Daughter of War      2017\n8                  Vizontele      2001\n9      Nefes: Vatan Sagolsun      2009\n10  Her Sey Çok Güzel Olacak      1998\n11               Ahlat Agaci      2018\n\n# Appropriate join operation to fill in the duration, rating, and votes attributes of the new data frame\n\n\nturkish_movies_in_top1000 &lt;- merge(x = movies_top, y = movies,\n                                   by.x = c(\"titles_top\", \"years_top\"),\n                                   by.y = c(\"titles\", \"years\"),\n                                   all.x = TRUE)\n\nprint(turkish_movies_in_top1000)\n\n                  titles_top years_top durations ratings votes\n1                Ahlat Agaci      2018       188     8.0 35018\n2  Ayla: The Daughter of War      2017       125     8.3 35018\n3             Babam ve Oglum      2005       108     8.2 35018\n4    Bir Zamanlar Anadolu'da      2011       157     7.8  5063\n5                     Eskiya      1996       128     8.1 35018\n6                   G.O.R.A.      2004       127     8.0 35018\n7   Her Sey Çok Güzel Olacak      1998       107     8.1 35018\n8                 Kis Uykusu      2014       196     8.0  5063\n9      Nefes: Vatan Sagolsun      2009       128     8.0  5063\n10                 Vizontele      2001       110     8.0  5063\n11  Yedinci Kogustaki Mucize      2019       132     8.2  5063\n\n\n\n# Order the 11 movies based on their Rank. Are these the same first high-rated 11movies in your initial data frame?\n\nmovies_top_desc_order &lt;- turkish_movies_in_top1000 %&gt;% arrange(desc(ratings))\n  \n\nmovies_desc_order_11 &lt;- head(movies_desc_order, n=11)\n\nfor (i in 1:11) {\n  result &lt;- ifelse(movies_desc_order_11$titles[i] == movies_top_desc_order$titles_top[i], \"same order!!!\", \"not same order!!!\")\n  print(result)\n}\n\n[1] \"not same order!!!\"\n[1] \"not same order!!!\"\n[1] \"not same order!!!\"\n[1] \"not same order!!!\"\n[1] \"not same order!!!\"\n[1] \"not same order!!!\"\n[1] \"not same order!!!\"\n[1] \"not same order!!!\"\n[1] \"not same order!!!\"\n[1] \"not same order!!!\"\n[1] \"not same order!!!\"\n\n\nIMDb may focus not only on ranking scores but also on factors such as vote counts, critic evaluations, or other criteria when determining its top 1000 movie list. In this case, differences in rankings could stem from these varying criteria."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "B.S., Industrial Engineering, Hacettepe University, Turkey, 2019 - ongoing.\nAnkara Atatürk High School, Turkey, 2014 - 2019"
  },
  {
    "objectID": "about.html#employements",
    "href": "about.html#employements",
    "title": "About Me",
    "section": "Employements",
    "text": "Employements\n\nTürk Havacılık Uzay Sanayii, Production Planning Candidate Engineer, November 2022 - May 2023\nHacettepe University, Part-Time Student, December 2021 - May 2022"
  },
  {
    "objectID": "about.html#internships",
    "href": "about.html#internships",
    "title": "About Me",
    "section": "Internships",
    "text": "Internships\n\nASELSAN, Project Management Intern, August 2023 - September 2023\nTürk Traktör ve Ziraat Makineleri A.Ş., Business Development Intern, July 2023 - August 2023\nKazan Soda Elektrik A.Ş., Logistics Intern, July 2022 - August 2022"
  },
  {
    "objectID": "assignments/assignment-1.html",
    "href": "assignments/assignment-1.html",
    "title": "Assignment 1",
    "section": "",
    "text": "My first assignment has three parts.\n\n\nIf you are interest in this topic, just click!!!\nPower BI is described in this video as a feature-rich business intelligence application that includes capabilities for data transformation, acquisition, and visualization. But many people find it difficult to grasp Power BI; however, R users can shorten the learning curve by using Tidyverse. This presentation introduces viewers to Tidyverse and shows them how to use it to quickly learn Power BI and do tasks that may not be achievable with Power BI’s built-in capability.\n—-This video is not about replacing R Studio with Power BI.—-\n\n\n\n\n\nIn R programming language, &lt;- is used for assignment operation which I had a hard time getting used to. &lt;- is used for creating variable and assigning a values. However,to do assignment operation, we use the “=” symbol, which Prof. Daşdemir finds more logical in the R programming language. One of the main differences between two programming language is assignment operator.\nHere an example of usage of &lt;- for assignment operation in R :\n\n# Assign the value of 7 which is my lucky number to the variable 'my_lucky_number'\nmy_lucky_number &lt;- 7\n\n#Update the value of 'my_lucky_number'\nmy_lucky_number &lt;- my_lucky_number + 2\n\n# Print the new value of variable 'my_lucky_number'\nprint(my_lucky_number)\n\n[1] 9\n\n\nHere an example of usage of &lt;- for assignment operation in Python:\n\n# Assign the value of 7 to the variable 'my_lucky_number'\nmy_lucky_number = 7\n\n#Update the value of 'my_lucky_number'\nmy_lucky_number += 2\n\n# Print the new value of variable 'my_lucky_number'\nprint(my_lucky_number)\n\n9\n\n\n\n\n\nThe majority of functions are built into the R programming language, making it easier to use; but, in order to utilize them in Python, we must download libararies. For example, ‘mean’;\nHere an example of usage of mean function in R :\n\nheights_in_cm &lt;- c(185,190, 178, 192, 188, 176, 180)\naverage &lt;- mean(heights_in_cm)\ncat(\"the average of heights:\", average)\n\nthe average of heights: 184.1429\n\n\nHere an example of usage of mean function in Pyhton :\n\n# Import numpy for using mean function\nimport numpy as np\nheights_in_cm = [185, 190, 178, 192, 188, 176, 180]\n\n#Calculate of average of heights\naverage = np.mean(heights_in_cm)\n\n# Print the value of variable\nprint(\"the average of heights:\", average)\n\nthe average of heights: 184.14285714285714\n\n\n\n\n\nWhile we perform the square root calculations of the elements in a list by looping over a list in Python, we perform the same operation using the sqrt function in R.\nHere an example of calculating square root in R:\n\nvector &lt;- c(25, 36, 121,9)\n#Calculate square roots of elements\nsquare_roots &lt;- sqrt(vector)\n\n#Print the list of square roots\ncat(\"square_roots:\", square_roots)\n\nsquare_roots: 5 6 11 3\n\n\nHere an example of calculating square root in Python :\n\nlist = [25, 36, 121,9] \nsquare_roots = []\n#Calculate square roots and add the list of them\nfor i in list:\n  square_roots.append(i**0.5)\n\n#Print the list of square roots\nprint(\"square_roots:\", square_roots)\n\nsquare_roots: [5.0, 6.0, 11.0, 3.0]\n\n\n\n\n\n\nIn this section, we examine the na_example data set to identify NAs and replace them with 0.\n\n# Import the “na_example” data set\nlibrary(dslabs)\ndata(\"na_example\")\n\n#Print the data set \nna_example\n\n   [1]  2  1  3  2  1  3  1  4  3  2  2 NA  2  2  1  4 NA  1  1  2  1  2  2  1\n  [25]  2  5 NA  2  2  3  1  2  4  1  1  1  4  5  2  3  4  1  2  4  1  1  2  1\n  [49]  5 NA NA NA  1  1  5  1  3  1 NA  4  4  7  3  2 NA NA  1 NA  4  1  2  2\n  [73]  3  2  1  2  2  4  3  4  2  3  1  3  2  1  1  1  3  1 NA  3  1  2  2  1\n  [97]  2  2  1  1  4  1  1  2  3  3  2  2  3  3  3  4  1  1  1  2 NA  4  3  4\n [121]  3  1  2  1 NA NA NA NA  1  5  1  2  1  3  5  3  2  2 NA NA NA NA  3  5\n [145]  3  1  1  4  2  4  3  3 NA  2  3  2  6 NA  1  1  2  2  1  3  1  1  5 NA\n [169] NA  2  4 NA  2  5  1  4  3  3 NA  4  3  1  4  1  1  3  1  1 NA NA  3  5\n [193]  2  2  2  3  1  2  2  3  2  1 NA  2 NA  1 NA NA  2  1  1 NA  3 NA  1  2\n [217]  2  1  3  2  2  1  1  2  3  1  1  1  4  3  4  2  2  1  4  1 NA  5  1  4\n [241] NA  3 NA NA  1  1  5  2  3  3  2  4 NA  3  2  5 NA  2  3  4  6  2  2  2\n [265] NA  2 NA  2 NA  3  3  2  2  4  3  1  4  2 NA  2  4 NA  6  2  3  1 NA  2\n [289]  2 NA  1  1  3  2  3  3  1 NA  1  4  2  1  1  3  2  1  2  3  1 NA  2  3\n [313]  3  2  1  2  3  5  5  1  2  3  3  1 NA NA  1  2  4 NA  2  1  1  1  3  2\n [337]  1  1  3  4 NA  1  2  1  1  3  3 NA  1  1  3  5  3  2  3  4  1  4  3  1\n [361] NA  2  1  2  2  1  2  2  6  1  2  4  5 NA  3  4  2  1  1  4  2  1  1  1\n [385]  1  2  1  4  4  1  3 NA  3  3 NA  2 NA  1  2  1  1  4  2  1  4  4 NA  1\n [409]  2 NA  3  2  2  2  1  4  3  6  1  2  3  1  3  2  2  2  1  1  3  2  1  1\n [433]  1  3  2  2 NA  4  4  4  1  1 NA  4  3 NA  1  3  1  3  2  4  2  2  2  3\n [457]  2  1  4  3 NA  1  4  3  1  3  2 NA  3 NA  1  3  1  4  1  1  1  2  4  3\n [481]  1  2  2  2  3  2  3  1  1 NA  3  2  1  1  2 NA  2  2  2  3  3  1  1  2\n [505] NA  1  2  1  1  3  3  1  3  1  1  1  1  1  2  5  1  1  2  2  1  1 NA  1\n [529]  4  1  2  4  1  3  2 NA  1  1 NA  2  1  1  4  2  3  3  1  5  3  1  1  2\n [553] NA  1  1  3  1  3  2  4 NA  2  3  2  1  2  1  1  1  2  2  3  1  5  2 NA\n [577]  2 NA  3  2  2  2  1  5  3  2  3  1 NA  3  1  2  2  2  1  2  2  4 NA  6\n [601]  1  2 NA  1  1  2  2  3 NA  3  2  3  3  4  2 NA  2 NA  4 NA  1  1  2  2\n [625]  3  1  1  1  3 NA  2  5 NA  7  1 NA  4  3  3  1 NA  1  1  1  1  3  2  4\n [649]  2  2  3 NA NA  1  4  3  2  2  2  3  2  4  2  2  4 NA NA NA  6  3  3  1\n [673]  4  4  2  1 NA  1  6 NA  3  3  2  1  1  6 NA  1  5  1 NA  2  6  2 NA  4\n [697]  1  3  1  2 NA  1  1  3  1  2  4  2  1  3  2  4  3  2  2  1  1  5  6  4\n [721]  2  2  2  2  4 NA  1  2  2  2  2  4  5 NA NA NA  4  3  3  3  2  4  2  4\n [745] NA NA NA NA  2  1 NA  2  4  3  2 NA  2  3  1  3  4 NA  1  2  1  2 NA  3\n [769]  1  2  1  2  1  2  1  2  2  2  2  1  1  3  3  1  3  4  3 NA NA  4  2  3\n [793]  2  1  3  2  4  2  2  3  1  2  4  3  3  4 NA  1  4  2  1  1  1  3  1  5\n [817]  2  2  4  2 NA  1  3  1  2 NA  1  2  1  2  1 NA  1  3  2  3  2 NA  2  1\n [841]  4  2 NA NA NA  2  4  2 NA NA  3  1 NA  5  5  2  2  2 NA  2  1  3  1  3\n [865]  2  4  2  4 NA  4  1  2  3  2  3  3  2  3  2  2  2  1  3  2  4  2 NA  3\n [889]  3  2  2 NA NA  3  2  1  2  4  1  1  1  1  4  3  2 NA  3  2 NA  1 NA  3\n [913]  2  1  1  1  2 NA  2  2  3  3  2 NA NA  4  5  2  2  2  1  2  3  1  3  3\n [937]  4  3 NA  1  1  1 NA  4  3  5  1  1  2 NA  2  2  2  2  5  2  2  3  1  2\n [961]  3 NA  1  2 NA NA  2 NA  3  1  1  2  5  3  5  1  1  4 NA  2  1  3  1  1\n [985]  2  4  3  3  3 NA  1  1  2  2  1  1  2  2 NA  2\n\n# Count the total number of NA\ntotal_number_NA1 &lt;- sum(is.na(na_example))\ncat(\"TOTAL NUMBER OF NA :\", total_number_NA1 )\n\nTOTAL NUMBER OF NA : 145\n\n\n\n# Create new variable for data set with 0\nna_example_with_0 &lt;- na_example\n\n# Replace NAs with 0\nna_example_with_0[is.na(na_example)] &lt;- 0\n\n# Print new data set with 0\nna_example_with_0\n\n   [1] 2 1 3 2 1 3 1 4 3 2 2 0 2 2 1 4 0 1 1 2 1 2 2 1 2 5 0 2 2 3 1 2 4 1 1 1 4\n  [38] 5 2 3 4 1 2 4 1 1 2 1 5 0 0 0 1 1 5 1 3 1 0 4 4 7 3 2 0 0 1 0 4 1 2 2 3 2\n  [75] 1 2 2 4 3 4 2 3 1 3 2 1 1 1 3 1 0 3 1 2 2 1 2 2 1 1 4 1 1 2 3 3 2 2 3 3 3\n [112] 4 1 1 1 2 0 4 3 4 3 1 2 1 0 0 0 0 1 5 1 2 1 3 5 3 2 2 0 0 0 0 3 5 3 1 1 4\n [149] 2 4 3 3 0 2 3 2 6 0 1 1 2 2 1 3 1 1 5 0 0 2 4 0 2 5 1 4 3 3 0 4 3 1 4 1 1\n [186] 3 1 1 0 0 3 5 2 2 2 3 1 2 2 3 2 1 0 2 0 1 0 0 2 1 1 0 3 0 1 2 2 1 3 2 2 1\n [223] 1 2 3 1 1 1 4 3 4 2 2 1 4 1 0 5 1 4 0 3 0 0 1 1 5 2 3 3 2 4 0 3 2 5 0 2 3\n [260] 4 6 2 2 2 0 2 0 2 0 3 3 2 2 4 3 1 4 2 0 2 4 0 6 2 3 1 0 2 2 0 1 1 3 2 3 3\n [297] 1 0 1 4 2 1 1 3 2 1 2 3 1 0 2 3 3 2 1 2 3 5 5 1 2 3 3 1 0 0 1 2 4 0 2 1 1\n [334] 1 3 2 1 1 3 4 0 1 2 1 1 3 3 0 1 1 3 5 3 2 3 4 1 4 3 1 0 2 1 2 2 1 2 2 6 1\n [371] 2 4 5 0 3 4 2 1 1 4 2 1 1 1 1 2 1 4 4 1 3 0 3 3 0 2 0 1 2 1 1 4 2 1 4 4 0\n [408] 1 2 0 3 2 2 2 1 4 3 6 1 2 3 1 3 2 2 2 1 1 3 2 1 1 1 3 2 2 0 4 4 4 1 1 0 4\n [445] 3 0 1 3 1 3 2 4 2 2 2 3 2 1 4 3 0 1 4 3 1 3 2 0 3 0 1 3 1 4 1 1 1 2 4 3 1\n [482] 2 2 2 3 2 3 1 1 0 3 2 1 1 2 0 2 2 2 3 3 1 1 2 0 1 2 1 1 3 3 1 3 1 1 1 1 1\n [519] 2 5 1 1 2 2 1 1 0 1 4 1 2 4 1 3 2 0 1 1 0 2 1 1 4 2 3 3 1 5 3 1 1 2 0 1 1\n [556] 3 1 3 2 4 0 2 3 2 1 2 1 1 1 2 2 3 1 5 2 0 2 0 3 2 2 2 1 5 3 2 3 1 0 3 1 2\n [593] 2 2 1 2 2 4 0 6 1 2 0 1 1 2 2 3 0 3 2 3 3 4 2 0 2 0 4 0 1 1 2 2 3 1 1 1 3\n [630] 0 2 5 0 7 1 0 4 3 3 1 0 1 1 1 1 3 2 4 2 2 3 0 0 1 4 3 2 2 2 3 2 4 2 2 4 0\n [667] 0 0 6 3 3 1 4 4 2 1 0 1 6 0 3 3 2 1 1 6 0 1 5 1 0 2 6 2 0 4 1 3 1 2 0 1 1\n [704] 3 1 2 4 2 1 3 2 4 3 2 2 1 1 5 6 4 2 2 2 2 4 0 1 2 2 2 2 4 5 0 0 0 4 3 3 3\n [741] 2 4 2 4 0 0 0 0 2 1 0 2 4 3 2 0 2 3 1 3 4 0 1 2 1 2 0 3 1 2 1 2 1 2 1 2 2\n [778] 2 2 1 1 3 3 1 3 4 3 0 0 4 2 3 2 1 3 2 4 2 2 3 1 2 4 3 3 4 0 1 4 2 1 1 1 3\n [815] 1 5 2 2 4 2 0 1 3 1 2 0 1 2 1 2 1 0 1 3 2 3 2 0 2 1 4 2 0 0 0 2 4 2 0 0 3\n [852] 1 0 5 5 2 2 2 0 2 1 3 1 3 2 4 2 4 0 4 1 2 3 2 3 3 2 3 2 2 2 1 3 2 4 2 0 3\n [889] 3 2 2 0 0 3 2 1 2 4 1 1 1 1 4 3 2 0 3 2 0 1 0 3 2 1 1 1 2 0 2 2 3 3 2 0 0\n [926] 4 5 2 2 2 1 2 3 1 3 3 4 3 0 1 1 1 0 4 3 5 1 1 2 0 2 2 2 2 5 2 2 3 1 2 3 0\n [963] 1 2 0 0 2 0 3 1 1 2 5 3 5 1 1 4 0 2 1 3 1 1 2 4 3 3 3 0 1 1 2 2 1 1 2 2 0\n[1000] 2\n\n# Count the total number of NA in new data set\ntotal_number_NA2 &lt;- sum(is.na(na_example_with_0))\ncat(\"TOTAL NUMBER OF NA :\", total_number_NA2 )\n\nTOTAL NUMBER OF NA : 0\n\n\n1"
  },
  {
    "objectID": "assignments.html",
    "href": "assignments.html",
    "title": "My Assignments",
    "section": "",
    "text": "On this page, I showcase the assignment I conducted for the Fall 2023 EMU 430 Data Analytics course.\nPlease use left menu to navigate through my assignments.\nThe most recent update to this page was made on December 28, 2023\n\n\n\n Back to top"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "My Blog",
    "section": "",
    "text": "This page is under construction.\n\n\n\n Back to top"
  },
  {
    "objectID": "assignments/assignment-1.html#b",
    "href": "assignments/assignment-1.html#b",
    "title": "Assignment 1",
    "section": "",
    "text": "In R programming language, &lt;- is used for assignment operation which I had a hard time getting used to. &lt;- is used for creating variable and assigning a values. However,to do assignment operation, we use the “=” symbol, which Prof. Daşdemir finds more logical in the R programming language. One of the main differences between two programming language is assignment operator.\nHere an example of usage of &lt;- for assignment operation in R :\n\n# Assign the value of 7 which is my lucky number to the variable 'my_lucky_number'\nmy_lucky_number &lt;- 7\n\n#Update the value of 'my_lucky_number'\nmy_lucky_number &lt;- my_lucky_number + 2\n\n# Print the new value of variable 'my_lucky_number'\nprint(my_lucky_number)\n\n[1] 9\n\n\nHere an example of usage of &lt;- for assignment operation in Python:\n\n# Assign the value of 7 to the variable 'my_lucky_number'\nmy_lucky_number = 7\n\n#Update the value of 'my_lucky_number'\nmy_lucky_number += 2\n\n# Print the new value of variable 'my_lucky_number'\nprint(my_lucky_number)\n\n9\n\n\n\n\n\nThe majority of functions are built into the R programming language, making it easier to use; but, in order to utilize them in Python, we must download libararies. For example, ‘mean’;\nHere an example of usage of mean function in R :\n\nheights_in_cm &lt;- c(185,190, 178, 192, 188, 176, 180)\naverage &lt;- mean(heights_in_cm)\ncat(\"the average of heights:\", average)\n\nthe average of heights: 184.1429\n\n\nHere an example of usage of mean function in Pyhton :\n\n# Import numpy for using mean function\nimport numpy as np\nheights_in_cm = [185, 190, 178, 192, 188, 176, 180]\n\n#Calculate of average of heights\naverage = np.mean(heights_in_cm)\n\n# Print the value of variable\nprint(\"the average of heights:\", average)\n\nthe average of heights: 184.14285714285714\n\n\n\n\n\nWhile we perform the square root calculations of the elements in a list by looping over a list in Python, we perform the same operation using the sqrt function in R.\nHere an example of calculating square root in R:\n\nvector &lt;- c(25, 36, 121,9)\n#Calculate square roots of elements\nsquare_roots &lt;- sqrt(vector)\n\n#Print the list of square roots\ncat(\"square_roots:\", square_roots)\n\nsquare_roots: 5 6 11 3\n\n\nHere an example of calculating square root in Python :\n\nlist = [25, 36, 121,9] \nsquare_roots = []\n#Calculate square roots and add the list of them\nfor i in list:\n  square_roots.append(i**0.5)\n\n#Print the list of square roots\nprint(\"square_roots:\", square_roots)\n\nsquare_roots: [5.0, 6.0, 11.0, 3.0]"
  },
  {
    "objectID": "assignments/assignment-1.html#c",
    "href": "assignments/assignment-1.html#c",
    "title": "Assignment 1",
    "section": "",
    "text": "In this section, we examine the na_example data set to identify NAs and replace them with 0. I’m grateful to Chatgpt for its assistance of usage of is.na().\n\n# Import the “na_example” data set\nlibrary(dslabs)\ndata(\"na_example\")\n\n#Print the data set \nna_example\n\n   [1]  2  1  3  2  1  3  1  4  3  2  2 NA  2  2  1  4 NA  1  1  2  1  2  2  1\n  [25]  2  5 NA  2  2  3  1  2  4  1  1  1  4  5  2  3  4  1  2  4  1  1  2  1\n  [49]  5 NA NA NA  1  1  5  1  3  1 NA  4  4  7  3  2 NA NA  1 NA  4  1  2  2\n  [73]  3  2  1  2  2  4  3  4  2  3  1  3  2  1  1  1  3  1 NA  3  1  2  2  1\n  [97]  2  2  1  1  4  1  1  2  3  3  2  2  3  3  3  4  1  1  1  2 NA  4  3  4\n [121]  3  1  2  1 NA NA NA NA  1  5  1  2  1  3  5  3  2  2 NA NA NA NA  3  5\n [145]  3  1  1  4  2  4  3  3 NA  2  3  2  6 NA  1  1  2  2  1  3  1  1  5 NA\n [169] NA  2  4 NA  2  5  1  4  3  3 NA  4  3  1  4  1  1  3  1  1 NA NA  3  5\n [193]  2  2  2  3  1  2  2  3  2  1 NA  2 NA  1 NA NA  2  1  1 NA  3 NA  1  2\n [217]  2  1  3  2  2  1  1  2  3  1  1  1  4  3  4  2  2  1  4  1 NA  5  1  4\n [241] NA  3 NA NA  1  1  5  2  3  3  2  4 NA  3  2  5 NA  2  3  4  6  2  2  2\n [265] NA  2 NA  2 NA  3  3  2  2  4  3  1  4  2 NA  2  4 NA  6  2  3  1 NA  2\n [289]  2 NA  1  1  3  2  3  3  1 NA  1  4  2  1  1  3  2  1  2  3  1 NA  2  3\n [313]  3  2  1  2  3  5  5  1  2  3  3  1 NA NA  1  2  4 NA  2  1  1  1  3  2\n [337]  1  1  3  4 NA  1  2  1  1  3  3 NA  1  1  3  5  3  2  3  4  1  4  3  1\n [361] NA  2  1  2  2  1  2  2  6  1  2  4  5 NA  3  4  2  1  1  4  2  1  1  1\n [385]  1  2  1  4  4  1  3 NA  3  3 NA  2 NA  1  2  1  1  4  2  1  4  4 NA  1\n [409]  2 NA  3  2  2  2  1  4  3  6  1  2  3  1  3  2  2  2  1  1  3  2  1  1\n [433]  1  3  2  2 NA  4  4  4  1  1 NA  4  3 NA  1  3  1  3  2  4  2  2  2  3\n [457]  2  1  4  3 NA  1  4  3  1  3  2 NA  3 NA  1  3  1  4  1  1  1  2  4  3\n [481]  1  2  2  2  3  2  3  1  1 NA  3  2  1  1  2 NA  2  2  2  3  3  1  1  2\n [505] NA  1  2  1  1  3  3  1  3  1  1  1  1  1  2  5  1  1  2  2  1  1 NA  1\n [529]  4  1  2  4  1  3  2 NA  1  1 NA  2  1  1  4  2  3  3  1  5  3  1  1  2\n [553] NA  1  1  3  1  3  2  4 NA  2  3  2  1  2  1  1  1  2  2  3  1  5  2 NA\n [577]  2 NA  3  2  2  2  1  5  3  2  3  1 NA  3  1  2  2  2  1  2  2  4 NA  6\n [601]  1  2 NA  1  1  2  2  3 NA  3  2  3  3  4  2 NA  2 NA  4 NA  1  1  2  2\n [625]  3  1  1  1  3 NA  2  5 NA  7  1 NA  4  3  3  1 NA  1  1  1  1  3  2  4\n [649]  2  2  3 NA NA  1  4  3  2  2  2  3  2  4  2  2  4 NA NA NA  6  3  3  1\n [673]  4  4  2  1 NA  1  6 NA  3  3  2  1  1  6 NA  1  5  1 NA  2  6  2 NA  4\n [697]  1  3  1  2 NA  1  1  3  1  2  4  2  1  3  2  4  3  2  2  1  1  5  6  4\n [721]  2  2  2  2  4 NA  1  2  2  2  2  4  5 NA NA NA  4  3  3  3  2  4  2  4\n [745] NA NA NA NA  2  1 NA  2  4  3  2 NA  2  3  1  3  4 NA  1  2  1  2 NA  3\n [769]  1  2  1  2  1  2  1  2  2  2  2  1  1  3  3  1  3  4  3 NA NA  4  2  3\n [793]  2  1  3  2  4  2  2  3  1  2  4  3  3  4 NA  1  4  2  1  1  1  3  1  5\n [817]  2  2  4  2 NA  1  3  1  2 NA  1  2  1  2  1 NA  1  3  2  3  2 NA  2  1\n [841]  4  2 NA NA NA  2  4  2 NA NA  3  1 NA  5  5  2  2  2 NA  2  1  3  1  3\n [865]  2  4  2  4 NA  4  1  2  3  2  3  3  2  3  2  2  2  1  3  2  4  2 NA  3\n [889]  3  2  2 NA NA  3  2  1  2  4  1  1  1  1  4  3  2 NA  3  2 NA  1 NA  3\n [913]  2  1  1  1  2 NA  2  2  3  3  2 NA NA  4  5  2  2  2  1  2  3  1  3  3\n [937]  4  3 NA  1  1  1 NA  4  3  5  1  1  2 NA  2  2  2  2  5  2  2  3  1  2\n [961]  3 NA  1  2 NA NA  2 NA  3  1  1  2  5  3  5  1  1  4 NA  2  1  3  1  1\n [985]  2  4  3  3  3 NA  1  1  2  2  1  1  2  2 NA  2\n\n# Count the total number of NA\ntotal_number_NA1 &lt;- sum(is.na(na_example))\ncat(\"TOTAL NUMBER OF NA :\", total_number_NA1 )\n\nTOTAL NUMBER OF NA : 145\n\n\n\n# Create new variable for data set with 0\nna_example_with_0 &lt;- na_example\n\n# Replace NAs with 0\nna_example_with_0[is.na(na_example)] &lt;- 0\n\n# Print new data set with 0\nna_example_with_0\n\n   [1] 2 1 3 2 1 3 1 4 3 2 2 0 2 2 1 4 0 1 1 2 1 2 2 1 2 5 0 2 2 3 1 2 4 1 1 1 4\n  [38] 5 2 3 4 1 2 4 1 1 2 1 5 0 0 0 1 1 5 1 3 1 0 4 4 7 3 2 0 0 1 0 4 1 2 2 3 2\n  [75] 1 2 2 4 3 4 2 3 1 3 2 1 1 1 3 1 0 3 1 2 2 1 2 2 1 1 4 1 1 2 3 3 2 2 3 3 3\n [112] 4 1 1 1 2 0 4 3 4 3 1 2 1 0 0 0 0 1 5 1 2 1 3 5 3 2 2 0 0 0 0 3 5 3 1 1 4\n [149] 2 4 3 3 0 2 3 2 6 0 1 1 2 2 1 3 1 1 5 0 0 2 4 0 2 5 1 4 3 3 0 4 3 1 4 1 1\n [186] 3 1 1 0 0 3 5 2 2 2 3 1 2 2 3 2 1 0 2 0 1 0 0 2 1 1 0 3 0 1 2 2 1 3 2 2 1\n [223] 1 2 3 1 1 1 4 3 4 2 2 1 4 1 0 5 1 4 0 3 0 0 1 1 5 2 3 3 2 4 0 3 2 5 0 2 3\n [260] 4 6 2 2 2 0 2 0 2 0 3 3 2 2 4 3 1 4 2 0 2 4 0 6 2 3 1 0 2 2 0 1 1 3 2 3 3\n [297] 1 0 1 4 2 1 1 3 2 1 2 3 1 0 2 3 3 2 1 2 3 5 5 1 2 3 3 1 0 0 1 2 4 0 2 1 1\n [334] 1 3 2 1 1 3 4 0 1 2 1 1 3 3 0 1 1 3 5 3 2 3 4 1 4 3 1 0 2 1 2 2 1 2 2 6 1\n [371] 2 4 5 0 3 4 2 1 1 4 2 1 1 1 1 2 1 4 4 1 3 0 3 3 0 2 0 1 2 1 1 4 2 1 4 4 0\n [408] 1 2 0 3 2 2 2 1 4 3 6 1 2 3 1 3 2 2 2 1 1 3 2 1 1 1 3 2 2 0 4 4 4 1 1 0 4\n [445] 3 0 1 3 1 3 2 4 2 2 2 3 2 1 4 3 0 1 4 3 1 3 2 0 3 0 1 3 1 4 1 1 1 2 4 3 1\n [482] 2 2 2 3 2 3 1 1 0 3 2 1 1 2 0 2 2 2 3 3 1 1 2 0 1 2 1 1 3 3 1 3 1 1 1 1 1\n [519] 2 5 1 1 2 2 1 1 0 1 4 1 2 4 1 3 2 0 1 1 0 2 1 1 4 2 3 3 1 5 3 1 1 2 0 1 1\n [556] 3 1 3 2 4 0 2 3 2 1 2 1 1 1 2 2 3 1 5 2 0 2 0 3 2 2 2 1 5 3 2 3 1 0 3 1 2\n [593] 2 2 1 2 2 4 0 6 1 2 0 1 1 2 2 3 0 3 2 3 3 4 2 0 2 0 4 0 1 1 2 2 3 1 1 1 3\n [630] 0 2 5 0 7 1 0 4 3 3 1 0 1 1 1 1 3 2 4 2 2 3 0 0 1 4 3 2 2 2 3 2 4 2 2 4 0\n [667] 0 0 6 3 3 1 4 4 2 1 0 1 6 0 3 3 2 1 1 6 0 1 5 1 0 2 6 2 0 4 1 3 1 2 0 1 1\n [704] 3 1 2 4 2 1 3 2 4 3 2 2 1 1 5 6 4 2 2 2 2 4 0 1 2 2 2 2 4 5 0 0 0 4 3 3 3\n [741] 2 4 2 4 0 0 0 0 2 1 0 2 4 3 2 0 2 3 1 3 4 0 1 2 1 2 0 3 1 2 1 2 1 2 1 2 2\n [778] 2 2 1 1 3 3 1 3 4 3 0 0 4 2 3 2 1 3 2 4 2 2 3 1 2 4 3 3 4 0 1 4 2 1 1 1 3\n [815] 1 5 2 2 4 2 0 1 3 1 2 0 1 2 1 2 1 0 1 3 2 3 2 0 2 1 4 2 0 0 0 2 4 2 0 0 3\n [852] 1 0 5 5 2 2 2 0 2 1 3 1 3 2 4 2 4 0 4 1 2 3 2 3 3 2 3 2 2 2 1 3 2 4 2 0 3\n [889] 3 2 2 0 0 3 2 1 2 4 1 1 1 1 4 3 2 0 3 2 0 1 0 3 2 1 1 1 2 0 2 2 3 3 2 0 0\n [926] 4 5 2 2 2 1 2 3 1 3 3 4 3 0 1 1 1 0 4 3 5 1 1 2 0 2 2 2 2 5 2 2 3 1 2 3 0\n [963] 1 2 0 0 2 0 3 1 1 2 5 3 5 1 1 4 0 2 1 3 1 1 2 4 3 3 3 0 1 1 2 2 1 1 2 2 0\n[1000] 2\n\n# Count the total number of NA in new data set\ntotal_number_NA2 &lt;- sum(is.na(na_example_with_0))\ncat(\"TOTAL NUMBER OF NA :\", total_number_NA2 )\n\nTOTAL NUMBER OF NA : 0"
  },
  {
    "objectID": "assignments/assignment-1.html#a",
    "href": "assignments/assignment-1.html#a",
    "title": "Assignment 1",
    "section": "",
    "text": "If you are interest in this topic, just click!!!\nPower BI is described in this video as a feature-rich business intelligence application that includes capabilities for data transformation, acquisition, and visualization. But many people find it difficult to grasp Power BI; however, R users can shorten the learning curve by using Tidyverse. This presentation introduces viewers to Tidyverse and shows them how to use it to quickly learn Power BI and do tasks that may not be achievable with Power BI’s built-in capability.\n—-This video is not about replacing R Studio with Power BI.—-"
  },
  {
    "objectID": "assignments/assignment-1.html#a-the-r-integration-in-power-bi-why-r-developers-should-be-interested",
    "href": "assignments/assignment-1.html#a-the-r-integration-in-power-bi-why-r-developers-should-be-interested",
    "title": "Assignment 1",
    "section": "",
    "text": "If you are interest in this topic, just click!!!\nPower BI is described in this video as a feature-rich business intelligence application that includes capabilities for data transformation, acquisition, and visualization. But many people find it difficult to grasp Power BI; however, R users can shorten the learning curve by using Tidyverse. This presentation introduces viewers to Tidyverse and shows them how to use it to quickly learn Power BI and do tasks that may not be achievable with Power BI’s built-in capability.\n—-This video is not about replacing R Studio with Power BI.—-"
  },
  {
    "objectID": "assignments/assignment-1.html#b-differeneces-between-r-and-pyhton",
    "href": "assignments/assignment-1.html#b-differeneces-between-r-and-pyhton",
    "title": "Assignment 1",
    "section": "",
    "text": "In R programming language, &lt;- is used for assignment operation which I had a hard time getting used to. &lt;- is used for creating variable and assigning a values. However,to do assignment operation, we use the “=” symbol, which Prof. Daşdemir finds more logical in the R programming language. One of the main differences between two programming language is assignment operator.\nHere an example of usage of &lt;- for assignment operation in R :\n\n# Assign the value of 7 which is my lucky number to the variable 'my_lucky_number'\nmy_lucky_number &lt;- 7\n\n#Update the value of 'my_lucky_number'\nmy_lucky_number &lt;- my_lucky_number + 2\n\n# Print the new value of variable 'my_lucky_number'\nprint(my_lucky_number)\n\n[1] 9\n\n\nHere an example of usage of &lt;- for assignment operation in Python:\n\n# Assign the value of 7 to the variable 'my_lucky_number'\nmy_lucky_number = 7\n\n#Update the value of 'my_lucky_number'\nmy_lucky_number += 2\n\n# Print the new value of variable 'my_lucky_number'\nprint(my_lucky_number)\n\n9\n\n\n\n\n\nThe majority of functions are built into the R programming language, making it easier to use; but, in order to utilize them in Python, we must download libararies. For example, ‘mean’;\nHere an example of usage of mean function in R :\n\nheights_in_cm &lt;- c(185,190, 178, 192, 188, 176, 180)\naverage &lt;- mean(heights_in_cm)\ncat(\"the average of heights:\", average)\n\nthe average of heights: 184.1429\n\n\nHere an example of usage of mean function in Pyhton :\n\n# Import numpy for using mean function\nimport numpy as np\nheights_in_cm = [185, 190, 178, 192, 188, 176, 180]\n\n#Calculate of average of heights\naverage = np.mean(heights_in_cm)\n\n# Print the value of variable\nprint(\"the average of heights:\", average)\n\nthe average of heights: 184.14285714285714\n\n\n\n\n\nWhile we perform the square root calculations of the elements in a list by looping over a list in Python, we perform the same operation using the sqrt function in R.\nHere an example of calculating square root in R:\n\nvector &lt;- c(25, 36, 121,9)\n#Calculate square roots of elements\nsquare_roots &lt;- sqrt(vector)\n\n#Print the list of square roots\ncat(\"square_roots:\", square_roots)\n\nsquare_roots: 5 6 11 3\n\n\nHere an example of calculating square root in Python :\n\nlist = [25, 36, 121,9] \nsquare_roots = []\n#Calculate square roots and add the list of them\nfor i in list:\n  square_roots.append(i**0.5)\n\n#Print the list of square roots\nprint(\"square_roots:\", square_roots)\n\nsquare_roots: [5.0, 6.0, 11.0, 3.0]"
  },
  {
    "objectID": "assignments/assignment-1.html#c-na_example-data-set",
    "href": "assignments/assignment-1.html#c-na_example-data-set",
    "title": "Assignment 1",
    "section": "",
    "text": "In this section, we examine the na_example data set to identify NAs and replace them with 0.\n\n# Import the “na_example” data set\nlibrary(dslabs)\ndata(\"na_example\")\n\n#Print the data set \nna_example\n\n   [1]  2  1  3  2  1  3  1  4  3  2  2 NA  2  2  1  4 NA  1  1  2  1  2  2  1\n  [25]  2  5 NA  2  2  3  1  2  4  1  1  1  4  5  2  3  4  1  2  4  1  1  2  1\n  [49]  5 NA NA NA  1  1  5  1  3  1 NA  4  4  7  3  2 NA NA  1 NA  4  1  2  2\n  [73]  3  2  1  2  2  4  3  4  2  3  1  3  2  1  1  1  3  1 NA  3  1  2  2  1\n  [97]  2  2  1  1  4  1  1  2  3  3  2  2  3  3  3  4  1  1  1  2 NA  4  3  4\n [121]  3  1  2  1 NA NA NA NA  1  5  1  2  1  3  5  3  2  2 NA NA NA NA  3  5\n [145]  3  1  1  4  2  4  3  3 NA  2  3  2  6 NA  1  1  2  2  1  3  1  1  5 NA\n [169] NA  2  4 NA  2  5  1  4  3  3 NA  4  3  1  4  1  1  3  1  1 NA NA  3  5\n [193]  2  2  2  3  1  2  2  3  2  1 NA  2 NA  1 NA NA  2  1  1 NA  3 NA  1  2\n [217]  2  1  3  2  2  1  1  2  3  1  1  1  4  3  4  2  2  1  4  1 NA  5  1  4\n [241] NA  3 NA NA  1  1  5  2  3  3  2  4 NA  3  2  5 NA  2  3  4  6  2  2  2\n [265] NA  2 NA  2 NA  3  3  2  2  4  3  1  4  2 NA  2  4 NA  6  2  3  1 NA  2\n [289]  2 NA  1  1  3  2  3  3  1 NA  1  4  2  1  1  3  2  1  2  3  1 NA  2  3\n [313]  3  2  1  2  3  5  5  1  2  3  3  1 NA NA  1  2  4 NA  2  1  1  1  3  2\n [337]  1  1  3  4 NA  1  2  1  1  3  3 NA  1  1  3  5  3  2  3  4  1  4  3  1\n [361] NA  2  1  2  2  1  2  2  6  1  2  4  5 NA  3  4  2  1  1  4  2  1  1  1\n [385]  1  2  1  4  4  1  3 NA  3  3 NA  2 NA  1  2  1  1  4  2  1  4  4 NA  1\n [409]  2 NA  3  2  2  2  1  4  3  6  1  2  3  1  3  2  2  2  1  1  3  2  1  1\n [433]  1  3  2  2 NA  4  4  4  1  1 NA  4  3 NA  1  3  1  3  2  4  2  2  2  3\n [457]  2  1  4  3 NA  1  4  3  1  3  2 NA  3 NA  1  3  1  4  1  1  1  2  4  3\n [481]  1  2  2  2  3  2  3  1  1 NA  3  2  1  1  2 NA  2  2  2  3  3  1  1  2\n [505] NA  1  2  1  1  3  3  1  3  1  1  1  1  1  2  5  1  1  2  2  1  1 NA  1\n [529]  4  1  2  4  1  3  2 NA  1  1 NA  2  1  1  4  2  3  3  1  5  3  1  1  2\n [553] NA  1  1  3  1  3  2  4 NA  2  3  2  1  2  1  1  1  2  2  3  1  5  2 NA\n [577]  2 NA  3  2  2  2  1  5  3  2  3  1 NA  3  1  2  2  2  1  2  2  4 NA  6\n [601]  1  2 NA  1  1  2  2  3 NA  3  2  3  3  4  2 NA  2 NA  4 NA  1  1  2  2\n [625]  3  1  1  1  3 NA  2  5 NA  7  1 NA  4  3  3  1 NA  1  1  1  1  3  2  4\n [649]  2  2  3 NA NA  1  4  3  2  2  2  3  2  4  2  2  4 NA NA NA  6  3  3  1\n [673]  4  4  2  1 NA  1  6 NA  3  3  2  1  1  6 NA  1  5  1 NA  2  6  2 NA  4\n [697]  1  3  1  2 NA  1  1  3  1  2  4  2  1  3  2  4  3  2  2  1  1  5  6  4\n [721]  2  2  2  2  4 NA  1  2  2  2  2  4  5 NA NA NA  4  3  3  3  2  4  2  4\n [745] NA NA NA NA  2  1 NA  2  4  3  2 NA  2  3  1  3  4 NA  1  2  1  2 NA  3\n [769]  1  2  1  2  1  2  1  2  2  2  2  1  1  3  3  1  3  4  3 NA NA  4  2  3\n [793]  2  1  3  2  4  2  2  3  1  2  4  3  3  4 NA  1  4  2  1  1  1  3  1  5\n [817]  2  2  4  2 NA  1  3  1  2 NA  1  2  1  2  1 NA  1  3  2  3  2 NA  2  1\n [841]  4  2 NA NA NA  2  4  2 NA NA  3  1 NA  5  5  2  2  2 NA  2  1  3  1  3\n [865]  2  4  2  4 NA  4  1  2  3  2  3  3  2  3  2  2  2  1  3  2  4  2 NA  3\n [889]  3  2  2 NA NA  3  2  1  2  4  1  1  1  1  4  3  2 NA  3  2 NA  1 NA  3\n [913]  2  1  1  1  2 NA  2  2  3  3  2 NA NA  4  5  2  2  2  1  2  3  1  3  3\n [937]  4  3 NA  1  1  1 NA  4  3  5  1  1  2 NA  2  2  2  2  5  2  2  3  1  2\n [961]  3 NA  1  2 NA NA  2 NA  3  1  1  2  5  3  5  1  1  4 NA  2  1  3  1  1\n [985]  2  4  3  3  3 NA  1  1  2  2  1  1  2  2 NA  2\n\n# Count the total number of NA\ntotal_number_NA1 &lt;- sum(is.na(na_example))\ncat(\"TOTAL NUMBER OF NA :\", total_number_NA1 )\n\nTOTAL NUMBER OF NA : 145\n\n\n\n# Create new variable for data set with 0\nna_example_with_0 &lt;- na_example\n\n# Replace NAs with 0\nna_example_with_0[is.na(na_example)] &lt;- 0\n\n# Print new data set with 0\nna_example_with_0\n\n   [1] 2 1 3 2 1 3 1 4 3 2 2 0 2 2 1 4 0 1 1 2 1 2 2 1 2 5 0 2 2 3 1 2 4 1 1 1 4\n  [38] 5 2 3 4 1 2 4 1 1 2 1 5 0 0 0 1 1 5 1 3 1 0 4 4 7 3 2 0 0 1 0 4 1 2 2 3 2\n  [75] 1 2 2 4 3 4 2 3 1 3 2 1 1 1 3 1 0 3 1 2 2 1 2 2 1 1 4 1 1 2 3 3 2 2 3 3 3\n [112] 4 1 1 1 2 0 4 3 4 3 1 2 1 0 0 0 0 1 5 1 2 1 3 5 3 2 2 0 0 0 0 3 5 3 1 1 4\n [149] 2 4 3 3 0 2 3 2 6 0 1 1 2 2 1 3 1 1 5 0 0 2 4 0 2 5 1 4 3 3 0 4 3 1 4 1 1\n [186] 3 1 1 0 0 3 5 2 2 2 3 1 2 2 3 2 1 0 2 0 1 0 0 2 1 1 0 3 0 1 2 2 1 3 2 2 1\n [223] 1 2 3 1 1 1 4 3 4 2 2 1 4 1 0 5 1 4 0 3 0 0 1 1 5 2 3 3 2 4 0 3 2 5 0 2 3\n [260] 4 6 2 2 2 0 2 0 2 0 3 3 2 2 4 3 1 4 2 0 2 4 0 6 2 3 1 0 2 2 0 1 1 3 2 3 3\n [297] 1 0 1 4 2 1 1 3 2 1 2 3 1 0 2 3 3 2 1 2 3 5 5 1 2 3 3 1 0 0 1 2 4 0 2 1 1\n [334] 1 3 2 1 1 3 4 0 1 2 1 1 3 3 0 1 1 3 5 3 2 3 4 1 4 3 1 0 2 1 2 2 1 2 2 6 1\n [371] 2 4 5 0 3 4 2 1 1 4 2 1 1 1 1 2 1 4 4 1 3 0 3 3 0 2 0 1 2 1 1 4 2 1 4 4 0\n [408] 1 2 0 3 2 2 2 1 4 3 6 1 2 3 1 3 2 2 2 1 1 3 2 1 1 1 3 2 2 0 4 4 4 1 1 0 4\n [445] 3 0 1 3 1 3 2 4 2 2 2 3 2 1 4 3 0 1 4 3 1 3 2 0 3 0 1 3 1 4 1 1 1 2 4 3 1\n [482] 2 2 2 3 2 3 1 1 0 3 2 1 1 2 0 2 2 2 3 3 1 1 2 0 1 2 1 1 3 3 1 3 1 1 1 1 1\n [519] 2 5 1 1 2 2 1 1 0 1 4 1 2 4 1 3 2 0 1 1 0 2 1 1 4 2 3 3 1 5 3 1 1 2 0 1 1\n [556] 3 1 3 2 4 0 2 3 2 1 2 1 1 1 2 2 3 1 5 2 0 2 0 3 2 2 2 1 5 3 2 3 1 0 3 1 2\n [593] 2 2 1 2 2 4 0 6 1 2 0 1 1 2 2 3 0 3 2 3 3 4 2 0 2 0 4 0 1 1 2 2 3 1 1 1 3\n [630] 0 2 5 0 7 1 0 4 3 3 1 0 1 1 1 1 3 2 4 2 2 3 0 0 1 4 3 2 2 2 3 2 4 2 2 4 0\n [667] 0 0 6 3 3 1 4 4 2 1 0 1 6 0 3 3 2 1 1 6 0 1 5 1 0 2 6 2 0 4 1 3 1 2 0 1 1\n [704] 3 1 2 4 2 1 3 2 4 3 2 2 1 1 5 6 4 2 2 2 2 4 0 1 2 2 2 2 4 5 0 0 0 4 3 3 3\n [741] 2 4 2 4 0 0 0 0 2 1 0 2 4 3 2 0 2 3 1 3 4 0 1 2 1 2 0 3 1 2 1 2 1 2 1 2 2\n [778] 2 2 1 1 3 3 1 3 4 3 0 0 4 2 3 2 1 3 2 4 2 2 3 1 2 4 3 3 4 0 1 4 2 1 1 1 3\n [815] 1 5 2 2 4 2 0 1 3 1 2 0 1 2 1 2 1 0 1 3 2 3 2 0 2 1 4 2 0 0 0 2 4 2 0 0 3\n [852] 1 0 5 5 2 2 2 0 2 1 3 1 3 2 4 2 4 0 4 1 2 3 2 3 3 2 3 2 2 2 1 3 2 4 2 0 3\n [889] 3 2 2 0 0 3 2 1 2 4 1 1 1 1 4 3 2 0 3 2 0 1 0 3 2 1 1 1 2 0 2 2 3 3 2 0 0\n [926] 4 5 2 2 2 1 2 3 1 3 3 4 3 0 1 1 1 0 4 3 5 1 1 2 0 2 2 2 2 5 2 2 3 1 2 3 0\n [963] 1 2 0 0 2 0 3 1 1 2 5 3 5 1 1 4 0 2 1 3 1 1 2 4 3 3 3 0 1 1 2 2 1 1 2 2 0\n[1000] 2\n\n# Count the total number of NA in new data set\ntotal_number_NA2 &lt;- sum(is.na(na_example_with_0))\ncat(\"TOTAL NUMBER OF NA :\", total_number_NA2 )\n\nTOTAL NUMBER OF NA : 0\n\n\n1"
  },
  {
    "objectID": "assignments/assignment-1.html#footnotes",
    "href": "assignments/assignment-1.html#footnotes",
    "title": "Assignment 1",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe content above was generated by AI using the following prompt: How can I find NA values in na_example data set in R?↩︎"
  },
  {
    "objectID": "assignments/assignment-2.html#using-the-filters-on-httpsm.imdb.comsearch-list-all-turkish-movies-with-more-than-2500-reviews-and-save-the-urls.",
    "href": "assignments/assignment-2.html#using-the-filters-on-httpsm.imdb.comsearch-list-all-turkish-movies-with-more-than-2500-reviews-and-save-the-urls.",
    "title": "Assignment 2",
    "section": "",
    "text": "Generating URL for the initial search with criteria like “Movie” type, “Turkey” as the country, and a minimum of “2500” votes, incorporating “&count=250” to extend the list. Create two additional URLs with release date filters for “01/01/2010-31/12/2023” and “……-31/12/2009.”\n\n# Import necessary packages\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.3.2\n\n\nWarning: package 'ggplot2' was built under R version 4.3.2\n\n\nWarning: package 'readr' was built under R version 4.3.2\n\n\nWarning: package 'dplyr' was built under R version 4.3.2\n\n\nWarning: package 'stringr' was built under R version 4.3.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(stringr)\nlibrary(rvest)\n\nWarning: package 'rvest' was built under R version 4.3.2\n\n\n\nAttaching package: 'rvest'\n\nThe following object is masked from 'package:readr':\n\n    guess_encoding\n\nlibrary(ggplot2)\nlibrary(knitr)\n\n# Generate the Urls vector \n\nurl_2010_2023 &lt;- \"https://www.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250\"\nurl_before_2010 &lt;- \"https://www.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250\"\nurl_vector &lt;- c(url_2010_2023, url_before_2010)"
  },
  {
    "objectID": "assignments/assignment-2.html#start-web-scrapping-to-create-a-data-frame-with-columns-title-year-durationrating-votes",
    "href": "assignments/assignment-2.html#start-web-scrapping-to-create-a-data-frame-with-columns-title-year-durationrating-votes",
    "title": "Assignment 2",
    "section": "",
    "text": "library(tidyverse)\nlibrary(stringr)\nlibrary(rvest)\n\n\nurl_2010_2023 &lt;- \"https://www.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250\"\nurl_before_2010 &lt;- \"https://www.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250\"\nurl_vector &lt;- c(url_2010_2023, url_before_2010)\n\n# Generate vectors for title, year,duration, rating, votes variables \n\ntitles &lt;- c()\nyears &lt;- c()\ndurations &lt;- c()\nratings &lt;- c()\nvotes &lt;- c()\n\n\n# Use For Loop for reading the HTML content of IBMD website because of having two dimensional vector of Urls\n\nfor (url in url_vector) {\n  page &lt;- read_html(url)\n  \n# Web scrapping to create a Data Frame with columns: Title, Year, Duration, Rating, Votes\n\n  title_names &lt;- page %&gt;% html_nodes('.ipc-title__text') %&gt;% html_text()\n  title_names &lt;- tail(head(title_names, -1), -1)\n  title_names &lt;- str_split(title_names, \" \", n = 2)\n  title_names &lt;- unlist(lapply(title_names, function(x) {x[2]}))\n  \n  year &lt;- page %&gt;% html_nodes(\".sc-43986a27-7.dBkaPT.dli-title-metadata\") %&gt;% html_text() %&gt;%\n    substr(1, 4) %&gt;%\n    as.numeric()\n  \n  duration &lt;- page %&gt;% html_nodes(\".sc-43986a27-7.dBkaPT.dli-title-metadata\") %&gt;% html_text()\n  \n# Extract only the hour part from the data containing both time and date, divide the data by 10 and take the        remainder\n  \n  hour &lt;- str_extract(duration, \"\\\\d+h\") %&gt;%\n    str_replace(\"h\", \"\") %&gt;%\n    as.numeric() %% 10\n  \n  total_duration &lt;- hour * 60 + str_extract(duration, \"\\\\d+m\") %&gt;%\n    str_replace(\"m\", \"\") %&gt;%\n    as.numeric()\n  \n  rating &lt;- page %&gt;% html_nodes(\".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating\") %&gt;%\n    html_text() %&gt;%\n    substr(1, 3) %&gt;%\n    as.numeric()\n  \n  vote &lt;- page %&gt;% html_node(\".sc-53c98e73-0.kRnqtn\") %&gt;% html_text() %&gt;%\n    parse_number()\n  \n# Adding URLs to the vectors created initially is done using the append function\n  \n  titles &lt;- append(titles, title_names)\n  years &lt;- append(years, year)\n  durations &lt;- append(durations, total_duration)\n  ratings &lt;- append(ratings, rating)\n  votes &lt;- append(votes, vote)\n}\n\n# Generate Data Frame with columns: Title, Year, Duration, Rating, Votes\n\nmovies &lt;- data.frame(titles, years, durations, ratings, votes)\nprint(head(movies))\n\n                    titles years durations ratings votes\n1        Kuru Otlar Üstüne  2023       197     8.1  5063\n2  Istanbul Için Son Çagri  2023        91     5.3 35018\n3 Yedinci Kogustaki Mucize  2019       132     8.2  5063\n4           Ölümlü Dünya 2  2023       117     7.5 35018\n5                   Bihter  2023       113     3.6  5063\n6             Ölümlü Dünya  2018       107     7.6 35018"
  },
  {
    "objectID": "assignments/assignment-2.html#conduct-an-exploratory-data-analysis-on-your-data-set-create-visualizations-to-address-the-following-questions-and-provide-insightful-facts-about-the-turkish-movie-industry.",
    "href": "assignments/assignment-2.html#conduct-an-exploratory-data-analysis-on-your-data-set-create-visualizations-to-address-the-following-questions-and-provide-insightful-facts-about-the-turkish-movie-industry.",
    "title": "Assignment 2",
    "section": "",
    "text": "# Descending order by rating of movies\n\nmovies_desc_order &lt;- movies %&gt;% arrange(desc(ratings))\n\n# The top 5 of movies\n\nprint(head(movies_desc_order,n=5))\n\n                        titles years durations ratings votes\n1               Hababam Sinifi  1975        87     9.2  5063\n2       CM101MMXI Fundamentals  2013       139     9.1  5063\n3                   Tosun Pasa  1976        90     8.9  5063\n4 Hababam Sinifi Sinifta Kaldi  1975        95     8.9  5063\n5                Süt Kardesler  1976        80     8.8  5063\n\n\n\n# The bottom 5 of movies\n\nprint(tail(movies_desc_order,n=5))\n\n                            titles years durations ratings votes\n466                 Cumali Ceber 2  2018       100     1.2  5063\n467                          Müjde  2022        NA     1.2  5063\n468              15/07 Safak Vakti  2021        95     1.2  5063\n469 Cumali Ceber: Allah Seni Alsin  2017       100     1.0  5063\n470                           Reis  2017       108     1.0 35018\n\n\nI’m not surprised to see that none of the ‘Hababam Sinifi’ films made it to the top. As the data frame indicates, being a film from 1975, it’s remarkable that I, born in 2000, still thoroughly enjoy watching it. Looking at the top 5 film data, it becomes apparent that people lean towards comedy genres, which holds true for my generation as well.\n\n\n\n1.acaydim kollarimi gitme diyeydim - Babam ve Oglum\n\n2.#teamCemsit- Selvi Boylum Al Yazmalim\n\n3.Komutan Logar, bir cisim yaklasiyor efendim - G.O.R.A.\n\n\nfav_movies &lt;- c(\"Babam ve Oglum\",\"Selvi Boylum Al Yazmalim\",\"G.O.R.A.\")\n\n# Check the years, rating and votes for my favorite movies\n\nfav_movies &lt;- movies %&gt;% filter (titles %in% fav_movies) %&gt;% select(-durations) %&gt;% arrange(desc(ratings))\nprint(fav_movies)\n\n                    titles years ratings votes\n1 Selvi Boylum Al Yazmalim  1977     8.5  5063\n2           Babam ve Oglum  2005     8.2 35018\n3                 G.O.R.A.  2004     8.0 35018\n\n\n\n\n\n\n# Import necessary packages\n\nlibrary(tidyverse)\nlibrary(ggplot2)\n\n# Scatter plot of avaerage ratings over the years\n\nyearly_avg &lt;- movies %&gt;%\n  group_by(years) %&gt;%\n  summarize(yearly_rating_averages = mean(ratings))\n\n\nyearly_avg_plot &lt;- ggplot(yearly_avg, aes(x = years, y = yearly_rating_averages)) +\n  geom_point(color = \"purple\",shape = 8, size = 2) +\n  labs(title = \"Yearly Average Ratings\",\n       x = \"Year\",\n       y = \"Average Rating\") +\n  theme_gray() +\n  theme(axis.title = element_text(color = \"pink\"))\n\nprint(yearly_avg_plot)\n\n\n\n\n\n# Scatter plot number of movies over the years\n\nnumber_of_movies &lt;- movies %&gt;%\n  group_by(years) %&gt;% summarize(number_movies = n())\n\nnumber_of_movies_plot &lt;- ggplot(number_of_movies, aes(x = years, y = number_movies)) +\n  geom_point(color = \"purple\",shape = 9, size = 2) +\n  labs(x = \"Year\", y = \"Number of Movies\") +\n  ggtitle(\"Yearly Number of Movies\")+\n  theme_gray() +\n  theme(axis.title = element_text(color = \"pink\"))\n\nprint(number_of_movies_plot)\n\n\n\n\n\n# Box plots of ratings over the years\n\nyearly_avg_box &lt;- ggplot(movies, aes(x = as.factor(years), y = ratings)) + \n  geom_boxplot(fill = \"pink\") +\n  labs(x = \"Year\",\n      y = \"Ratings\")+ ggtitle(\"Yearly Ratings\")+\n  theme_gray() +\n  theme(axis.title = element_text(color = \"purple\")) + theme(axis.text.x = element_text(angle = 90, hjust=1))\n  \n\nprint(yearly_avg_box)\n\n\n\n\nThe observed decline in ratings over the years might suggest a decrease in film quality; however, it is essential to acknowledge the increasing number of films since 1969, indicating a heightened competitive landscape. This dynamic underscores the importance of considering not only the quality of individual films but also the evolving industry context.\n\n\n\n\n# Correlation between ratings and votes\n\ncorrelation &lt;- cor(movies$ratings, movies$votes)\n\n# Print the correlation coefficient\n\ncat(\"Correlation between ratings and votes:\", correlation, \"\\n\")\n\nCorrelation between ratings and votes: 0.0332948 \n\n\nThe correlation coefficient you’ve calculated (0.0332948) is quite close to zero. In statistical terms, this indicates a very weak correlation between ratings and votes. A correlation close to zero suggests that there isn’t a strong linear relationship between these two variables.\nIn practical terms, this means that the number of votes a movie receives is not strongly associated with its rating. The correlation does not imply causation, so while there may be a weak correlation, it doesn’t necessarily mean that more votes directly cause higher or lower ratings, or vice versa. Other factors might influence both ratings and votes independently.\n\n\n\n\nmovies &lt;- na.omit(movies)\n\n# Correlation between ratings and movie's duration\n\ncorrelation &lt;- cor(movies$ratings, movies$durations)\n\ncat(\"Correlation between ratings and movie's duration:\", correlation, \"\\n\")\n\nCorrelation between ratings and movie's duration: 0.00234258 \n\n\n\n# Also we can check the line plot for correlation\n\ncorrelation_plot &lt;- ggplot(movies, aes(x = durations, y = ratings)) + \n  geom_line() + \n  labs(x = \"Movie's Duration\",\n       y = \"Ratings\") + \n  ggtitle(\"Line Plot Rating over the Durations\") +\n  theme_gray() +\n  theme(axis.title = element_text(color = \"purple\"),\n        axis.text.x = element_text(angle = 90))\n\nprint(correlation_plot)\n\n\n\n\nThe correlation coefficient of 0.00234258 between movie ratings and duration is highly negligible, indicating an exceedingly weak correlation in statistical terms. A correlation near zero implies the absence of a robust linear relationship between these two variables."
  },
  {
    "objectID": "assignments/assignment-2.html#repeat-steps-1-and-2-for-a-different-advanced-imdb-search.-this-time-find-turkish-movies-that-are-in-the-top-1000-movies-on-imdb.-perform-similar-scraping-to-create-another-dataframe-with-only-the-columns-title-year.",
    "href": "assignments/assignment-2.html#repeat-steps-1-and-2-for-a-different-advanced-imdb-search.-this-time-find-turkish-movies-that-are-in-the-top-1000-movies-on-imdb.-perform-similar-scraping-to-create-another-dataframe-with-only-the-columns-title-year.",
    "title": "Assignment 2",
    "section": "",
    "text": "library(tidyverse)\nlibrary(stringr)\nlibrary(rvest)\nlibrary(ggplot2)\n\n\nurl_top_turkish_movies  &lt;- \"https://www.imdb.com/search/title/?title_type=feature&sort=num_votes,desc&groups=top_1000&country_of_origin=TR\"\n\n\n# Generate the empty vector for titles and years\ntitles_top &lt;- c()\nyears_top &lt;- c()\n\n\n# Reading the HTML content of IBMD website\n\npage_2= read_html(url_top_turkish_movies)\n  \n\ntitle_names &lt;- page_2 %&gt;% html_nodes('.ipc-title__text')\ntitle_names &lt;- html_text(title_names)\ntitle_names &lt;- tail(head(title_names,-1),-1)\ntitle_names &lt;- str_split(title_names, \" \", n=2)\ntitle_names &lt;- unlist(lapply(title_names, function(x) {x[2]}))\n\nyear &lt;- page_2 %&gt;% html_nodes(\".sc-43986a27-7.dBkaPT.dli-title-metadata\")  %&gt;%\n  html_text()  %&gt;%\n  substr(1, 4) %&gt;%\n  as.numeric(year)\n\ntitles_top &lt;- append(titles_top, title_names)\nyears_top &lt;- append(years_top, year)\n\n\nmovies_top &lt;- data.frame(titles_top, years_top)\n\nprint(movies_top)\n\n                  titles_top years_top\n1             Babam ve Oglum      2005\n2                     Eskiya      1996\n3                   G.O.R.A.      2004\n4                 Kis Uykusu      2014\n5   Yedinci Kogustaki Mucize      2019\n6    Bir Zamanlar Anadolu'da      2011\n7  Ayla: The Daughter of War      2017\n8                  Vizontele      2001\n9      Nefes: Vatan Sagolsun      2009\n10  Her Sey Çok Güzel Olacak      1998\n11               Ahlat Agaci      2018\n\n# Appropriate join operation to fill in the duration, rating, and votes attributes of the new data frame\n\n\nturkish_movies_in_top1000 &lt;- merge(x = movies_top, y = movies,\n                                   by.x = c(\"titles_top\", \"years_top\"),\n                                   by.y = c(\"titles\", \"years\"),\n                                   all.x = TRUE)\n\nprint(turkish_movies_in_top1000)\n\n                  titles_top years_top durations ratings votes\n1                Ahlat Agaci      2018       188     8.0 35018\n2  Ayla: The Daughter of War      2017       125     8.3 35018\n3             Babam ve Oglum      2005       108     8.2 35018\n4    Bir Zamanlar Anadolu'da      2011       157     7.8  5063\n5                     Eskiya      1996       128     8.1 35018\n6                   G.O.R.A.      2004       127     8.0 35018\n7   Her Sey Çok Güzel Olacak      1998       107     8.1 35018\n8                 Kis Uykusu      2014       196     8.0  5063\n9      Nefes: Vatan Sagolsun      2009       128     8.0  5063\n10                 Vizontele      2001       110     8.0  5063\n11  Yedinci Kogustaki Mucize      2019       132     8.2  5063\n\n\n\n# Order the 11 movies based on their Rank. Are these the same first high-rated 11movies in your initial data frame?\n\nmovies_top_desc_order &lt;- turkish_movies_in_top1000 %&gt;% arrange(desc(ratings))\n  \n\nmovies_desc_order_11 &lt;- head(movies_desc_order, n=11)\n\nfor (i in 1:11) {\n  result &lt;- ifelse(movies_desc_order_11$titles[i] == movies_top_desc_order$titles_top[i], \"same order!!!\", \"not same order!!!\")\n  print(result)\n}\n\n[1] \"not same order!!!\"\n[1] \"not same order!!!\"\n[1] \"not same order!!!\"\n[1] \"not same order!!!\"\n[1] \"not same order!!!\"\n[1] \"not same order!!!\"\n[1] \"not same order!!!\"\n[1] \"not same order!!!\"\n[1] \"not same order!!!\"\n[1] \"not same order!!!\"\n[1] \"not same order!!!\"\n\n\nIMDb may focus not only on ranking scores but also on factors such as vote counts, critic evaluations, or other criteria when determining its top 1000 movie list. In this case, differences in rankings could stem from these varying criteria."
  }
]