{
  "hash": "c36ff0fb751010d220859dfea3495402",
  "result": {
    "markdown": "---\ntitle: \"Assignment 1\"\n---\n\n\n# Assignment 1\n\n\nMy first assignment has three parts.\n\n## (a) The R integration in Power BI: Why R developers should be Interested\n\n\n[If you are interest in this topic, just click!!!](https://www.rstudio.com/conference/2022/talks/tidyverse-power-bi-match-made/)\n\n Power BI is described in this video as a feature-rich business intelligence application that includes capabilities for data transformation, acquisition, and visualization. But many people find it difficult to grasp Power BI; however, R users can shorten the learning curve by using Tidyverse. This presentation introduces viewers to Tidyverse and shows them how to use it to quickly learn Power BI and do tasks that may not be achievable with Power BI's built-in capability.\n\n  ----This video is not about replacing R Studio with  Power BI.----\n\n\n## (b) Differeneces between R and Pyhton\n\n### 1.Assignment Operator\n\n In R programming language,  <- is used for assignment operation which I had a hard time getting used to. <- is used for creating variable and assigning a values. However,to do assignment operation, we use the \"=\" symbol, which Prof. Daşdemir finds more logical in the R programming language. One of the main differences between two programming language is assignment operator.\n\nHere an example of usage of <- for assignment operation in R :\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assign the value of 7 which is my lucky number to the variable 'my_lucky_number'\nmy_lucky_number <- 7\n\n#Update the value of 'my_lucky_number'\nmy_lucky_number <- my_lucky_number + 2\n\n# Print the new value of variable 'my_lucky_number'\nprint(my_lucky_number)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n:::\n\n\n\nHere an example of usage of <- for assignment operation in Python:\n\n::: {.cell}\n\n```{.python .cell-code}\n# Assign the value of 7 to the variable 'my_lucky_number'\nmy_lucky_number = 7\n\n#Update the value of 'my_lucky_number'\nmy_lucky_number += 2\n\n# Print the new value of variable 'my_lucky_number'\nprint(my_lucky_number)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n9\n```\n:::\n:::\n\n\n### 2. Mean Function\n\n The majority of functions are built into the R programming language, making it easier to use; but, in order to utilize them in Python, we must download libararies. For example, 'mean';\n\nHere an example of usage of mean function in R :\n\n::: {.cell}\n\n```{.r .cell-code}\nheights_in_cm <- c(185,190, 178, 192, 188, 176, 180)\naverage <- mean(heights_in_cm)\ncat(\"the average of heights:\", average)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nthe average of heights: 184.1429\n```\n:::\n:::\n\n\nHere an example of usage of mean function in Pyhton :\n\n::: {.cell}\n\n```{.python .cell-code}\n# Import numpy for using mean function\nimport numpy as np\nheights_in_cm = [185, 190, 178, 192, 188, 176, 180]\n\n#Calculate of average of heights\naverage = np.mean(heights_in_cm)\n\n# Print the value of variable\nprint(\"the average of heights:\", average)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nthe average of heights: 184.14285714285714\n```\n:::\n:::\n\n\n### 3. Calculating the Square Roots of Elements in List\n\n While we perform the square root calculations of the elements in a list by looping over a list in Python, we perform the same operation using the sqrt function in R.\n  \nHere an example of calculating square root in R:\n\n::: {.cell}\n\n```{.r .cell-code}\nvector <- c(25, 36, 121,9)\n#Calculate square roots of elements\nsquare_roots <- sqrt(vector)\n\n#Print the list of square roots\ncat(\"square_roots:\", square_roots)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nsquare_roots: 5 6 11 3\n```\n:::\n:::\n\n \nHere an example of calculating square root in Python :\n\n::: {.cell}\n\n```{.python .cell-code}\nlist = [25, 36, 121,9] \nsquare_roots = []\n#Calculate square roots and add the list of them\nfor i in list:\n  square_roots.append(i**0.5)\n\n#Print the list of square roots\nprint(\"square_roots:\", square_roots)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nsquare_roots: [5.0, 6.0, 11.0, 3.0]\n```\n:::\n:::\n\n\n\n## (c) na_example Data Set\n\nIn this section, we examine the na_example data set to identify NAs and replace them with 0. I'm grateful to Chatgpt for its assistance of usage of is.na().\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import the “na_example” data set\nlibrary(dslabs)\ndata(\"na_example\")\n\n#Print the data set \nna_example\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   [1]  2  1  3  2  1  3  1  4  3  2  2 NA  2  2  1  4 NA  1  1  2  1  2  2  1\n  [25]  2  5 NA  2  2  3  1  2  4  1  1  1  4  5  2  3  4  1  2  4  1  1  2  1\n  [49]  5 NA NA NA  1  1  5  1  3  1 NA  4  4  7  3  2 NA NA  1 NA  4  1  2  2\n  [73]  3  2  1  2  2  4  3  4  2  3  1  3  2  1  1  1  3  1 NA  3  1  2  2  1\n  [97]  2  2  1  1  4  1  1  2  3  3  2  2  3  3  3  4  1  1  1  2 NA  4  3  4\n [121]  3  1  2  1 NA NA NA NA  1  5  1  2  1  3  5  3  2  2 NA NA NA NA  3  5\n [145]  3  1  1  4  2  4  3  3 NA  2  3  2  6 NA  1  1  2  2  1  3  1  1  5 NA\n [169] NA  2  4 NA  2  5  1  4  3  3 NA  4  3  1  4  1  1  3  1  1 NA NA  3  5\n [193]  2  2  2  3  1  2  2  3  2  1 NA  2 NA  1 NA NA  2  1  1 NA  3 NA  1  2\n [217]  2  1  3  2  2  1  1  2  3  1  1  1  4  3  4  2  2  1  4  1 NA  5  1  4\n [241] NA  3 NA NA  1  1  5  2  3  3  2  4 NA  3  2  5 NA  2  3  4  6  2  2  2\n [265] NA  2 NA  2 NA  3  3  2  2  4  3  1  4  2 NA  2  4 NA  6  2  3  1 NA  2\n [289]  2 NA  1  1  3  2  3  3  1 NA  1  4  2  1  1  3  2  1  2  3  1 NA  2  3\n [313]  3  2  1  2  3  5  5  1  2  3  3  1 NA NA  1  2  4 NA  2  1  1  1  3  2\n [337]  1  1  3  4 NA  1  2  1  1  3  3 NA  1  1  3  5  3  2  3  4  1  4  3  1\n [361] NA  2  1  2  2  1  2  2  6  1  2  4  5 NA  3  4  2  1  1  4  2  1  1  1\n [385]  1  2  1  4  4  1  3 NA  3  3 NA  2 NA  1  2  1  1  4  2  1  4  4 NA  1\n [409]  2 NA  3  2  2  2  1  4  3  6  1  2  3  1  3  2  2  2  1  1  3  2  1  1\n [433]  1  3  2  2 NA  4  4  4  1  1 NA  4  3 NA  1  3  1  3  2  4  2  2  2  3\n [457]  2  1  4  3 NA  1  4  3  1  3  2 NA  3 NA  1  3  1  4  1  1  1  2  4  3\n [481]  1  2  2  2  3  2  3  1  1 NA  3  2  1  1  2 NA  2  2  2  3  3  1  1  2\n [505] NA  1  2  1  1  3  3  1  3  1  1  1  1  1  2  5  1  1  2  2  1  1 NA  1\n [529]  4  1  2  4  1  3  2 NA  1  1 NA  2  1  1  4  2  3  3  1  5  3  1  1  2\n [553] NA  1  1  3  1  3  2  4 NA  2  3  2  1  2  1  1  1  2  2  3  1  5  2 NA\n [577]  2 NA  3  2  2  2  1  5  3  2  3  1 NA  3  1  2  2  2  1  2  2  4 NA  6\n [601]  1  2 NA  1  1  2  2  3 NA  3  2  3  3  4  2 NA  2 NA  4 NA  1  1  2  2\n [625]  3  1  1  1  3 NA  2  5 NA  7  1 NA  4  3  3  1 NA  1  1  1  1  3  2  4\n [649]  2  2  3 NA NA  1  4  3  2  2  2  3  2  4  2  2  4 NA NA NA  6  3  3  1\n [673]  4  4  2  1 NA  1  6 NA  3  3  2  1  1  6 NA  1  5  1 NA  2  6  2 NA  4\n [697]  1  3  1  2 NA  1  1  3  1  2  4  2  1  3  2  4  3  2  2  1  1  5  6  4\n [721]  2  2  2  2  4 NA  1  2  2  2  2  4  5 NA NA NA  4  3  3  3  2  4  2  4\n [745] NA NA NA NA  2  1 NA  2  4  3  2 NA  2  3  1  3  4 NA  1  2  1  2 NA  3\n [769]  1  2  1  2  1  2  1  2  2  2  2  1  1  3  3  1  3  4  3 NA NA  4  2  3\n [793]  2  1  3  2  4  2  2  3  1  2  4  3  3  4 NA  1  4  2  1  1  1  3  1  5\n [817]  2  2  4  2 NA  1  3  1  2 NA  1  2  1  2  1 NA  1  3  2  3  2 NA  2  1\n [841]  4  2 NA NA NA  2  4  2 NA NA  3  1 NA  5  5  2  2  2 NA  2  1  3  1  3\n [865]  2  4  2  4 NA  4  1  2  3  2  3  3  2  3  2  2  2  1  3  2  4  2 NA  3\n [889]  3  2  2 NA NA  3  2  1  2  4  1  1  1  1  4  3  2 NA  3  2 NA  1 NA  3\n [913]  2  1  1  1  2 NA  2  2  3  3  2 NA NA  4  5  2  2  2  1  2  3  1  3  3\n [937]  4  3 NA  1  1  1 NA  4  3  5  1  1  2 NA  2  2  2  2  5  2  2  3  1  2\n [961]  3 NA  1  2 NA NA  2 NA  3  1  1  2  5  3  5  1  1  4 NA  2  1  3  1  1\n [985]  2  4  3  3  3 NA  1  1  2  2  1  1  2  2 NA  2\n```\n:::\n\n```{.r .cell-code}\n# Count the total number of NA\ntotal_number_NA1 <- sum(is.na(na_example))\ncat(\"TOTAL NUMBER OF NA :\", total_number_NA1 )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTOTAL NUMBER OF NA : 145\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create new variable for data set with 0\nna_example_with_0 <- na_example\n\n# Replace NAs with 0\nna_example_with_0[is.na(na_example)] <- 0\n\n# Print new data set with 0\nna_example_with_0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   [1] 2 1 3 2 1 3 1 4 3 2 2 0 2 2 1 4 0 1 1 2 1 2 2 1 2 5 0 2 2 3 1 2 4 1 1 1 4\n  [38] 5 2 3 4 1 2 4 1 1 2 1 5 0 0 0 1 1 5 1 3 1 0 4 4 7 3 2 0 0 1 0 4 1 2 2 3 2\n  [75] 1 2 2 4 3 4 2 3 1 3 2 1 1 1 3 1 0 3 1 2 2 1 2 2 1 1 4 1 1 2 3 3 2 2 3 3 3\n [112] 4 1 1 1 2 0 4 3 4 3 1 2 1 0 0 0 0 1 5 1 2 1 3 5 3 2 2 0 0 0 0 3 5 3 1 1 4\n [149] 2 4 3 3 0 2 3 2 6 0 1 1 2 2 1 3 1 1 5 0 0 2 4 0 2 5 1 4 3 3 0 4 3 1 4 1 1\n [186] 3 1 1 0 0 3 5 2 2 2 3 1 2 2 3 2 1 0 2 0 1 0 0 2 1 1 0 3 0 1 2 2 1 3 2 2 1\n [223] 1 2 3 1 1 1 4 3 4 2 2 1 4 1 0 5 1 4 0 3 0 0 1 1 5 2 3 3 2 4 0 3 2 5 0 2 3\n [260] 4 6 2 2 2 0 2 0 2 0 3 3 2 2 4 3 1 4 2 0 2 4 0 6 2 3 1 0 2 2 0 1 1 3 2 3 3\n [297] 1 0 1 4 2 1 1 3 2 1 2 3 1 0 2 3 3 2 1 2 3 5 5 1 2 3 3 1 0 0 1 2 4 0 2 1 1\n [334] 1 3 2 1 1 3 4 0 1 2 1 1 3 3 0 1 1 3 5 3 2 3 4 1 4 3 1 0 2 1 2 2 1 2 2 6 1\n [371] 2 4 5 0 3 4 2 1 1 4 2 1 1 1 1 2 1 4 4 1 3 0 3 3 0 2 0 1 2 1 1 4 2 1 4 4 0\n [408] 1 2 0 3 2 2 2 1 4 3 6 1 2 3 1 3 2 2 2 1 1 3 2 1 1 1 3 2 2 0 4 4 4 1 1 0 4\n [445] 3 0 1 3 1 3 2 4 2 2 2 3 2 1 4 3 0 1 4 3 1 3 2 0 3 0 1 3 1 4 1 1 1 2 4 3 1\n [482] 2 2 2 3 2 3 1 1 0 3 2 1 1 2 0 2 2 2 3 3 1 1 2 0 1 2 1 1 3 3 1 3 1 1 1 1 1\n [519] 2 5 1 1 2 2 1 1 0 1 4 1 2 4 1 3 2 0 1 1 0 2 1 1 4 2 3 3 1 5 3 1 1 2 0 1 1\n [556] 3 1 3 2 4 0 2 3 2 1 2 1 1 1 2 2 3 1 5 2 0 2 0 3 2 2 2 1 5 3 2 3 1 0 3 1 2\n [593] 2 2 1 2 2 4 0 6 1 2 0 1 1 2 2 3 0 3 2 3 3 4 2 0 2 0 4 0 1 1 2 2 3 1 1 1 3\n [630] 0 2 5 0 7 1 0 4 3 3 1 0 1 1 1 1 3 2 4 2 2 3 0 0 1 4 3 2 2 2 3 2 4 2 2 4 0\n [667] 0 0 6 3 3 1 4 4 2 1 0 1 6 0 3 3 2 1 1 6 0 1 5 1 0 2 6 2 0 4 1 3 1 2 0 1 1\n [704] 3 1 2 4 2 1 3 2 4 3 2 2 1 1 5 6 4 2 2 2 2 4 0 1 2 2 2 2 4 5 0 0 0 4 3 3 3\n [741] 2 4 2 4 0 0 0 0 2 1 0 2 4 3 2 0 2 3 1 3 4 0 1 2 1 2 0 3 1 2 1 2 1 2 1 2 2\n [778] 2 2 1 1 3 3 1 3 4 3 0 0 4 2 3 2 1 3 2 4 2 2 3 1 2 4 3 3 4 0 1 4 2 1 1 1 3\n [815] 1 5 2 2 4 2 0 1 3 1 2 0 1 2 1 2 1 0 1 3 2 3 2 0 2 1 4 2 0 0 0 2 4 2 0 0 3\n [852] 1 0 5 5 2 2 2 0 2 1 3 1 3 2 4 2 4 0 4 1 2 3 2 3 3 2 3 2 2 2 1 3 2 4 2 0 3\n [889] 3 2 2 0 0 3 2 1 2 4 1 1 1 1 4 3 2 0 3 2 0 1 0 3 2 1 1 1 2 0 2 2 3 3 2 0 0\n [926] 4 5 2 2 2 1 2 3 1 3 3 4 3 0 1 1 1 0 4 3 5 1 1 2 0 2 2 2 2 5 2 2 3 1 2 3 0\n [963] 1 2 0 0 2 0 3 1 1 2 5 3 5 1 1 4 0 2 1 3 1 1 2 4 3 3 3 0 1 1 2 2 1 1 2 2 0\n[1000] 2\n```\n:::\n\n```{.r .cell-code}\n# Count the total number of NA in new data set\ntotal_number_NA2 <- sum(is.na(na_example_with_0))\ncat(\"TOTAL NUMBER OF NA :\", total_number_NA2 )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTOTAL NUMBER OF NA : 0\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}